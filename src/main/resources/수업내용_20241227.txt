깃허브 협업 방식

1. fork
원하는 상대의 원격 레파지토리 자체를 내 원격 레파지토리로 가져옴

2. clone
fork한 원격 레파지토리를 자신의 로컬레파지토리로 만듬

(D 드라이브에서 BASH를 연다.)
D:
  ㄴ app (D 드라이브 아래에 app 폴더를 만든다.)

git clone 원격주소

cd 해당폴더 (해당폴더로 이동)


git branch 하위브랜치 (branch 생성)
git checkout 하위브랜치 (메인에서 dev branch로 변경)

만들어둔 D: > 해당폴더에 개발중인 프로젝트 수정 후 올리기

git add .
git commit -m ''
git push origin 하위브랜치


[ pull request ]
협업 시, 하나의 main에 개발 완료된 코드를 병합하기 위해 사용

- 팀장이 main을 관리, 나머지 인원들이 개발 완료 후 깃허브에서 pull request로 확인 요청을 함
- 충돌 여부 확인 필수 !
- merge > create a merge commit > confirm로 병합 처리

[ main branch 병합 개발이 완료된 이후 진행할것]
bash에서 깃허브에서 있는 개발 완료 코드들을 main으로 병합처리함 

1. 로컬 레파지토리 병합
git pull origin 하위브랜치
ls (현재 로컬레파지토리 상태 확인)
git checkout main (main branch로 변경)
git merge 하위브랜치 (하위브랜치에 있는 데이터  main으로 병합)

2. 원격 레파지토리 병합 > 깃 허브
git push origin main

[ 동기화 작업, 원격지에서 진행]
sync fork > update


[ 참고사항 ]
** 파이널에는 readme에 프로젝트 설명 추가 !

** 메인 branch에는 완성된 코드만 넣는다.
개발 완료 시 메인 branch에 병합해둔다.

** 개인 dev branch에 개발 중인 코드들을 넣고 작업한다.
(완료 후 메인 branch로 병합 > pull request 사용)